
A) Tree Range updates and point query
    1) increase nodes on path b/w u and v by 1
    2) print value of node u
    Soln:
    https://github.com/wwe123456789/Competitive-Programming/blob/master/USACO/Runaway.cpp
    https://github.com/wwe123456789/Competitive-Programming/blob/master/USACO/Maxflow.cpp
B) Enumerate over all submasks in O(3^n)
    https://cp-algorithms.com/algebra/all-submasks.html
C) Tree Range query and point updates
    1) sum,min,max nodes of path b/w u and v
    2) increase value of node u by some value
    Soln:
    https://codeforces.com/blog/entry/78564#comments
D) Monotonic queue to do min and max queries in a sliding window sort of approach o(N) ammortized:
    https://dunjudge.me/analysis/submissions/797234/
E) offline queries trick : read the editorial but i could use some more problems requiring ofline queries. 
    The main trick i learnt is that we can sort queries by their right endpoint and that basically means like we 
    traverse the array from left to right and consider all the queries with right endpoint = i.
    So in this problem we could store last[val] which basically means last index in 1...i where a[last[val]] = val.
    So for some a[i] if last[a[i]] != -1 we could set last[a[i]] to i and set the segment at last[a[i]] to 0 and then
    just take RSQ's. 
    https://atcoder.jp/contests/abc174/tasks/abc174_f

F) A cool trick called the "path isolation" trick where you sort of stretch some path (the diameter in this case) and attach all the other nodes to the nodes on this isolated path. The observation after 
that is the tree rooted at the ith node in the path can have at most a height of  min(i-1,n-i).  
https://codeforces.com/gym/102694/problem/B

G) For path query and update use HLD, and for subtree ones use ETT for ETT u can store in[u],out[u] for each node and keep a pointer t increment t and assign in[u]=t when we enter a node and assign out[u] = t(without incrementing) , when we exit a node this way we linearise the array 
then subtree of node u is represented by the range {in[u],out[u]}
